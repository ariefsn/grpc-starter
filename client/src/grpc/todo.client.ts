// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "todo.proto" (package "domain", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TodoHandler } from "./todo";
import type { TodoPayloadStatus } from "./todo";
import type { TodoPayloadUpdate } from "./todo";
import type { TodoPayload } from "./todo";
import type { TodoResponseSingle } from "./todo";
import type { TodoPayloadId } from "./todo";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TodoResponseMultiple } from "./todo";
import type { TodoPayloadList } from "./todo";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service domain.TodoHandler
 */
export interface ITodoHandlerClient {
    /**
     * @generated from protobuf rpc: Gets(domain.TodoPayloadList) returns (domain.TodoResponseMultiple);
     */
    gets(input: TodoPayloadList, options?: RpcOptions): UnaryCall<TodoPayloadList, TodoResponseMultiple>;
    /**
     * @generated from protobuf rpc: Get(domain.TodoPayloadId) returns (domain.TodoResponseSingle);
     */
    get(input: TodoPayloadId, options?: RpcOptions): UnaryCall<TodoPayloadId, TodoResponseSingle>;
    /**
     * @generated from protobuf rpc: Create(domain.TodoPayload) returns (domain.TodoResponseSingle);
     */
    create(input: TodoPayload, options?: RpcOptions): UnaryCall<TodoPayload, TodoResponseSingle>;
    /**
     * @generated from protobuf rpc: Update(domain.TodoPayloadUpdate) returns (domain.TodoResponseSingle);
     */
    update(input: TodoPayloadUpdate, options?: RpcOptions): UnaryCall<TodoPayloadUpdate, TodoResponseSingle>;
    /**
     * @generated from protobuf rpc: UpdateStatus(domain.TodoPayloadStatus) returns (domain.TodoResponseSingle);
     */
    updateStatus(input: TodoPayloadStatus, options?: RpcOptions): UnaryCall<TodoPayloadStatus, TodoResponseSingle>;
    /**
     * @generated from protobuf rpc: Delete(domain.TodoPayloadId) returns (domain.TodoResponseSingle);
     */
    delete(input: TodoPayloadId, options?: RpcOptions): UnaryCall<TodoPayloadId, TodoResponseSingle>;
}
/**
 * @generated from protobuf service domain.TodoHandler
 */
export class TodoHandlerClient implements ITodoHandlerClient, ServiceInfo {
    typeName = TodoHandler.typeName;
    methods = TodoHandler.methods;
    options = TodoHandler.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Gets(domain.TodoPayloadList) returns (domain.TodoResponseMultiple);
     */
    gets(input: TodoPayloadList, options?: RpcOptions): UnaryCall<TodoPayloadList, TodoResponseMultiple> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TodoPayloadList, TodoResponseMultiple>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Get(domain.TodoPayloadId) returns (domain.TodoResponseSingle);
     */
    get(input: TodoPayloadId, options?: RpcOptions): UnaryCall<TodoPayloadId, TodoResponseSingle> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<TodoPayloadId, TodoResponseSingle>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Create(domain.TodoPayload) returns (domain.TodoResponseSingle);
     */
    create(input: TodoPayload, options?: RpcOptions): UnaryCall<TodoPayload, TodoResponseSingle> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<TodoPayload, TodoResponseSingle>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(domain.TodoPayloadUpdate) returns (domain.TodoResponseSingle);
     */
    update(input: TodoPayloadUpdate, options?: RpcOptions): UnaryCall<TodoPayloadUpdate, TodoResponseSingle> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<TodoPayloadUpdate, TodoResponseSingle>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateStatus(domain.TodoPayloadStatus) returns (domain.TodoResponseSingle);
     */
    updateStatus(input: TodoPayloadStatus, options?: RpcOptions): UnaryCall<TodoPayloadStatus, TodoResponseSingle> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<TodoPayloadStatus, TodoResponseSingle>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(domain.TodoPayloadId) returns (domain.TodoResponseSingle);
     */
    delete(input: TodoPayloadId, options?: RpcOptions): UnaryCall<TodoPayloadId, TodoResponseSingle> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<TodoPayloadId, TodoResponseSingle>("unary", this._transport, method, opt, input);
    }
}
