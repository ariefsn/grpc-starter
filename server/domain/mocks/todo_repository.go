// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/ariefsn/go-grpc/server/domain"
	mock "github.com/stretchr/testify/mock"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, payload
func (_m *TodoRepository) Create(ctx context.Context, payload *domain.TodoDto) (*domain.Todo, error) {
	ret := _m.Called(ctx, payload)

	var r0 *domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.TodoDto) (*domain.Todo, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.TodoDto) *domain.Todo); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.TodoDto) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TodoRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, filter, skip, limit
func (_m *TodoRepository) Get(ctx context.Context, filter interface{}, skip int64, limit int64) ([]domain.Todo, int64, error) {
	ret := _m.Called(ctx, filter, skip, limit)

	var r0 []domain.Todo
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int64, int64) ([]domain.Todo, int64, error)); ok {
		return rf(ctx, filter, skip, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int64, int64) []domain.Todo); ok {
		r0 = rf(ctx, filter, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, int64, int64) int64); ok {
		r1 = rf(ctx, filter, skip, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, interface{}, int64, int64) error); ok {
		r2 = rf(ctx, filter, skip, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *TodoRepository) GetByID(ctx context.Context, id string) (*domain.Todo, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Todo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, payload
func (_m *TodoRepository) Update(ctx context.Context, id string, payload *domain.TodoDto) (*domain.Todo, error) {
	ret := _m.Called(ctx, id, payload)

	var r0 *domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.TodoDto) (*domain.Todo, error)); ok {
		return rf(ctx, id, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.TodoDto) *domain.Todo); ok {
		r0 = rf(ctx, id, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.TodoDto) error); ok {
		r1 = rf(ctx, id, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, id, isCompleted
func (_m *TodoRepository) UpdateStatus(ctx context.Context, id string, isCompleted bool) (*domain.Todo, error) {
	ret := _m.Called(ctx, id, isCompleted)

	var r0 *domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (*domain.Todo, error)); ok {
		return rf(ctx, id, isCompleted)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *domain.Todo); ok {
		r0 = rf(ctx, id, isCompleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, id, isCompleted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTodoRepository creates a new instance of TodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoRepository {
	mock := &TodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
