// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: todo.proto

package domain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TodoHandler_Gets_FullMethodName         = "/domain.TodoHandler/Gets"
	TodoHandler_Get_FullMethodName          = "/domain.TodoHandler/Get"
	TodoHandler_Create_FullMethodName       = "/domain.TodoHandler/Create"
	TodoHandler_Update_FullMethodName       = "/domain.TodoHandler/Update"
	TodoHandler_UpdateStatus_FullMethodName = "/domain.TodoHandler/UpdateStatus"
	TodoHandler_Delete_FullMethodName       = "/domain.TodoHandler/Delete"
)

// TodoHandlerClient is the client API for TodoHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoHandlerClient interface {
	Gets(ctx context.Context, in *TodoPayloadList, opts ...grpc.CallOption) (*TodoResponseMultiple, error)
	Get(ctx context.Context, in *TodoPayloadId, opts ...grpc.CallOption) (*TodoResponseSingle, error)
	Create(ctx context.Context, in *TodoPayload, opts ...grpc.CallOption) (*TodoResponseSingle, error)
	Update(ctx context.Context, in *TodoPayloadUpdate, opts ...grpc.CallOption) (*TodoResponseSingle, error)
	UpdateStatus(ctx context.Context, in *TodoPayloadStatus, opts ...grpc.CallOption) (*TodoResponseSingle, error)
	Delete(ctx context.Context, in *TodoPayloadId, opts ...grpc.CallOption) (*TodoResponseSingle, error)
}

type todoHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoHandlerClient(cc grpc.ClientConnInterface) TodoHandlerClient {
	return &todoHandlerClient{cc}
}

func (c *todoHandlerClient) Gets(ctx context.Context, in *TodoPayloadList, opts ...grpc.CallOption) (*TodoResponseMultiple, error) {
	out := new(TodoResponseMultiple)
	err := c.cc.Invoke(ctx, TodoHandler_Gets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoHandlerClient) Get(ctx context.Context, in *TodoPayloadId, opts ...grpc.CallOption) (*TodoResponseSingle, error) {
	out := new(TodoResponseSingle)
	err := c.cc.Invoke(ctx, TodoHandler_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoHandlerClient) Create(ctx context.Context, in *TodoPayload, opts ...grpc.CallOption) (*TodoResponseSingle, error) {
	out := new(TodoResponseSingle)
	err := c.cc.Invoke(ctx, TodoHandler_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoHandlerClient) Update(ctx context.Context, in *TodoPayloadUpdate, opts ...grpc.CallOption) (*TodoResponseSingle, error) {
	out := new(TodoResponseSingle)
	err := c.cc.Invoke(ctx, TodoHandler_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoHandlerClient) UpdateStatus(ctx context.Context, in *TodoPayloadStatus, opts ...grpc.CallOption) (*TodoResponseSingle, error) {
	out := new(TodoResponseSingle)
	err := c.cc.Invoke(ctx, TodoHandler_UpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoHandlerClient) Delete(ctx context.Context, in *TodoPayloadId, opts ...grpc.CallOption) (*TodoResponseSingle, error) {
	out := new(TodoResponseSingle)
	err := c.cc.Invoke(ctx, TodoHandler_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoHandlerServer is the server API for TodoHandler service.
// All implementations must embed UnimplementedTodoHandlerServer
// for forward compatibility
type TodoHandlerServer interface {
	Gets(context.Context, *TodoPayloadList) (*TodoResponseMultiple, error)
	Get(context.Context, *TodoPayloadId) (*TodoResponseSingle, error)
	Create(context.Context, *TodoPayload) (*TodoResponseSingle, error)
	Update(context.Context, *TodoPayloadUpdate) (*TodoResponseSingle, error)
	UpdateStatus(context.Context, *TodoPayloadStatus) (*TodoResponseSingle, error)
	Delete(context.Context, *TodoPayloadId) (*TodoResponseSingle, error)
	mustEmbedUnimplementedTodoHandlerServer()
}

// UnimplementedTodoHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedTodoHandlerServer struct {
}

func (UnimplementedTodoHandlerServer) Gets(context.Context, *TodoPayloadList) (*TodoResponseMultiple, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gets not implemented")
}
func (UnimplementedTodoHandlerServer) Get(context.Context, *TodoPayloadId) (*TodoResponseSingle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTodoHandlerServer) Create(context.Context, *TodoPayload) (*TodoResponseSingle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTodoHandlerServer) Update(context.Context, *TodoPayloadUpdate) (*TodoResponseSingle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTodoHandlerServer) UpdateStatus(context.Context, *TodoPayloadStatus) (*TodoResponseSingle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedTodoHandlerServer) Delete(context.Context, *TodoPayloadId) (*TodoResponseSingle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTodoHandlerServer) mustEmbedUnimplementedTodoHandlerServer() {}

// UnsafeTodoHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoHandlerServer will
// result in compilation errors.
type UnsafeTodoHandlerServer interface {
	mustEmbedUnimplementedTodoHandlerServer()
}

func RegisterTodoHandlerServer(s grpc.ServiceRegistrar, srv TodoHandlerServer) {
	s.RegisterService(&TodoHandler_ServiceDesc, srv)
}

func _TodoHandler_Gets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoPayloadList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoHandlerServer).Gets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoHandler_Gets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoHandlerServer).Gets(ctx, req.(*TodoPayloadList))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoHandler_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoPayloadId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoHandlerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoHandler_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoHandlerServer).Get(ctx, req.(*TodoPayloadId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoHandler_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoHandlerServer).Create(ctx, req.(*TodoPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoPayloadUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoHandler_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoHandlerServer).Update(ctx, req.(*TodoPayloadUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoHandler_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoPayloadStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoHandlerServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoHandler_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoHandlerServer).UpdateStatus(ctx, req.(*TodoPayloadStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoPayloadId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoHandler_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoHandlerServer).Delete(ctx, req.(*TodoPayloadId))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoHandler_ServiceDesc is the grpc.ServiceDesc for TodoHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domain.TodoHandler",
	HandlerType: (*TodoHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Gets",
			Handler:    _TodoHandler_Gets_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TodoHandler_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TodoHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TodoHandler_Update_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _TodoHandler_UpdateStatus_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TodoHandler_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}
